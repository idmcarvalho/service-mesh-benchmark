---
apiVersion: v1
kind: Namespace
metadata:
  name: health-check
  labels:
    workload-type: health-check
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: health-check-app
  namespace: health-check
data:
  app.py: |
    from flask import Flask, jsonify
    import os
    import psutil
    import time

    app = Flask(__name__)
    start_time = time.time()

    @app.route('/health')
    def health():
        return jsonify({
            'status': 'healthy',
            'timestamp': time.time()
        }), 200

    @app.route('/ready')
    def ready():
        return jsonify({
            'status': 'ready',
            'uptime': time.time() - start_time
        }), 200

    @app.route('/metrics')
    def metrics():
        return jsonify({
            'cpu_percent': psutil.cpu_percent(interval=0.1),
            'memory_percent': psutil.virtual_memory().percent,
            'disk_percent': psutil.disk_usage('/').percent,
            'uptime_seconds': time.time() - start_time
        }), 200

    @app.route('/probe')
    def probe():
        """Comprehensive health probe"""
        try:
            cpu = psutil.cpu_percent(interval=0.1)
            mem = psutil.virtual_memory()

            status = 'healthy'
            if cpu > 90 or mem.percent > 90:
                status = 'degraded'

            return jsonify({
                'status': status,
                'cpu_percent': cpu,
                'memory_mb': mem.used / 1024 / 1024,
                'memory_percent': mem.percent,
                'uptime': time.time() - start_time,
                'pid': os.getpid()
            }), 200
        except Exception as e:
            return jsonify({
                'status': 'unhealthy',
                'error': str(e)
            }), 500

    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=8080)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: health-check
  namespace: health-check
  labels:
    app: health-check
spec:
  replicas: 1
  selector:
    matchLabels:
      app: health-check
  template:
    metadata:
      labels:
        app: health-check
        version: v1
    spec:
      containers:
      - name: health-check
        # Use pre-built image with pinned dependencies
        # Build with: docker build -t health-check:v1.0.0 -f docker/health-check/Dockerfile docker/health-check/
        image: health-check:v1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: health-check
  namespace: health-check
  labels:
    app: health-check
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: health-check
