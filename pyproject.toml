[project]
name = "service-mesh-benchmark"
version = "1.0.0"
description = "Comprehensive benchmarking framework for service mesh implementations"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Sam", email = "sam@example.com"}
]
keywords = ["kubernetes", "service-mesh", "benchmarking", "istio", "cilium", "linkerd", "ebpf"]

dependencies = [
    "pytest>=8.0.0",
    "pytest-timeout>=2.2.0",
    "pytest-xdist>=3.5.0",
    "pytest-html>=4.1.1",
    "pytest-json-report>=1.5.0",
    "requests>=2.31.0",
    "kubernetes>=29.0.0",
    "python-hcl2>=4.3.2",
    "pyyaml>=6.0.1",
    "jinja2>=3.1.3",
    "tabulate>=0.9.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.9",
    "black>=23.12.0",
    "mypy>=1.8.0",
    "types-requests>=2.31.0",
    "types-PyYAML>=6.0.12",
    "types-tabulate>=0.9.0",
    "pre-commit>=3.6.0",
]

[build-system]
requires = ["setuptools>=68.0"]
build-backend = "setuptools.build_meta"

# ===========================
# Ruff Configuration
# ===========================
[tool.ruff]
line-length = 100
target-version = "py39"
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "N",     # pep8-naming
    "D",     # pydocstyle
    "UP",    # pyupgrade
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "S",     # flake8-bandit (security)
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "EM",    # flake8-errmsg
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "ERA",   # eradicate (commented code)
    "PL",    # pylint
    "TRY",   # tryceratops
    "RUF",   # ruff-specific rules
]

ignore = [
    "D203",    # one-blank-line-before-class (conflicts with D211)
    "D213",    # multi-line-summary-second-line (conflicts with D212)
    "ANN101",  # missing-type-self (not needed with modern Python)
    "ANN102",  # missing-type-cls (not needed with modern Python)
    "S101",    # use of assert (pytest uses assert)
    "PT009",   # pytest-unittest-assertion (we use pytest style)
    "PLR0913", # too-many-arguments (sometimes necessary)
    "TRY003",  # raise-vanilla-args (too strict)
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "D",       # Don't require docstrings in tests
    "ANN",     # Don't require type annotations in tests
    "S",       # Don't check security in tests
    "PLR2004", # Magic values are OK in tests
]
"tests/conftest.py" = [
    "F401",    # Unused imports OK in conftest
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["tests"]

# ===========================
# Black Configuration
# ===========================
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | venv
  | __pycache__
  | \.pytest_cache
  | \.mypy_cache
  | build
  | dist
  | \.eggs
)/
'''

# ===========================
# MyPy Configuration
# ===========================
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_error_context = true
pretty = true

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_calls = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "kubernetes.*",
    "hcl2.*",
]
ignore_missing_imports = true

# ===========================
# Pytest Configuration
# ===========================
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
]
markers = [
    "phase1: Pre-deployment validation tests",
    "phase2: Infrastructure validation tests",
    "phase3: Baseline performance tests",
    "phase4: Service mesh tests",
    "phase6: Comparative analysis tests",
    "phase7: Stress and edge case tests",
    "slow: Tests that take a long time to run",
    "integration: Integration tests requiring infrastructure",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# ===========================
# Coverage Configuration
# ===========================
[tool.coverage.run]
source = ["tests", "."]
omit = [
    "tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
